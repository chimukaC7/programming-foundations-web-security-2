Sanitize data

-Encoding Characters
-Escaping Characters

- When regulating requests and validating input, unacceptable input is rejected or ignored. That does not mean that the data is safe. It just means that it was not obviously unacceptable. Data that's allowed into your application must still be sanitized to make sure it's harmless. Sanitization is a lot like the decontamination tents that sometimes appear in TV shows and movies, but hopefully not in real life. The characters go into dangerous territory, where there may be disease and radiation, or unknown threats. When they return back to safety, they must first pass through a special tent for a shower and a thorough scrubbing. In the 1983 film Silkwood, four times, characters in a nuclear facility are exposed to radiation, and must submit to a brutal decontamination process. After the film came out, it became known as a Silkwood shower. But a better, earlier example can be found in the film The Andromeda Strain, from 1971. Scientists working to stop a deadly alien virus must go through a complete decontamination process before entering a lab facility. They burn their clothes, receive a radiation treatment, walk through chemicals, put on new clothes, take an elevator to another level, burn those clothes, receive a xenon lamp treatment that burns away the top layer of their skin, shower, and then get dressed in new clothes again. It's an impressive amount of sanitization. Sanitizing data is one of the most important steps to secure web application. The easiest and most commonly used attacks all send in malicious data, which passes your initial validations. Now unlike validations, we won't try to examine the data to identify the harmful parts. We'll just put it through a sanitization process, like sending it through a decontamination tent, regardless of whether the hero is carrying the virus or not. We'll give data a Silkwood shower to scrub away anything that's harmful. A good first step is to typecast all data, to make sure that it's the correct data type. Every programming language handles data types differently, and some are more forgiving than others. In many languages, this logical expression would evaluate to true. The integer one is equal to the string one. The language performs type juggling to convert the data type into a value which can be compared. Many languages allow adding different data types together. The integer one can be added to the string one to get the integer two. It's better to control the process by typecasting data yourself. In this example, the first line is typecasting a value as an integer, before it's being assigned to a variable. Maybe the value will already be an integer, maybe not. Either way, the code ensures that it will be an integer before it is used. Notice that the typecasting happens as early as possible, so that we don't forget to do it later. How we apply further sanitization depends on where the data will go next. A map of data pathways will help. If data will be sent in a SQL string to a database, then it needs SQL sanitization. If data will be sent to the browser in JavaScript, then it needs JavaScript sanitization. The same applies to HTML, JSON, XML, or any other language or format. The rules about what could be harmful, depend on the format. Most languages include a few special, powerful characters, which are part of the structure of the language. If these special characters are in the data, and not sanitized, then they may use their special meaning to cause problems. For example, in HTML, the less than symbol indicates the start of a tag, and the greater than symbol indicates the end of a tag. Here's an HTML tag where a class attribute is being provided by a PHP variable. If that variable contained a double quote with a greater than sign, those characters would close the HTML tag. After that, an attacker could add custom HTML or JavaScript code to the page. There are two techniques for rendering these powerful characters harmless. The characters can be encoded. That means that the powerful characters will be replaced with harmless equivalent characters. For example, in HTML, we can replace the less than symbol and the greater than symbol with < and >. The HTML will still show the user a less than or greater than sign, but without using a powerful character. Or the characters can be escaped. That means that a special character will be added before any powerful characters, to render them harmless. For example, in SQL queries to a database, the single quote is a powerful character, which indicates the beginning and end of a string. Adding a backslash character in front of any single quotes that are in the string, ensures that SQL treats them as harmless single quotes, and not as an indication of the start or the end of a string. This is a common vulnerability that we'll revisit in the next chapter. You should not attempt to write your own sanitization methods, to encode or escape characters. Sanitizing thoroughly, and for all possible cases, is really difficult. Instead, you should use well tested, language specific functions included with the programming language, or in a standard code library. You should avoid the temptation to remove or correct bad data. Stick to encoding and escaping. Removing data can become a game of cat and mouse. Let's imagine that a hacker submits some JavaScript in a string. If you add it to a webpage, it would run the hacker's code. Instead, you detect the opening and closing script tags, and you remove them. With the script tags gone, the JavaScript will not execute. But the hacker sees the result, and decides to try again. This time, the string is constructed so that when you detect and remove the script tags, it leaves another script tag behind. Encoding or escaping would have made both strings harmless. Data arriving directly from a user is not the only data that needs sanitization. Retrieving any stored data should be treated as new input too. For example, data may be properly sanitized for SQL when it's received, and then stored in a database. But when it's retrieved from the database, it needs to be sanitized again, before being used as HTML, JavaScript, JSON, XML, or another format. It's also possible that the data changed since it was last stored. Just because it resides on your system, doesn't mean you should trust it more than data coming directly from a user. You should always sanitize data before using it.