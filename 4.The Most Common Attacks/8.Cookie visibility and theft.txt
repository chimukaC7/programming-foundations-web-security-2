Cookie visibility and theft

Stealing Cookies
-duplicate values
-forge a request
-modify values

-sessions are usually stoted in a database or a file on the server side
-session ID is stored in the user's browser as a cookie
-sensitive data stays on the server 
-session ID will be observable in transit and in the cookie data

- Browser cookies are easily viewed, easily manipulated, and easily stolen. that they may seem like private data, but they're not. In many browsers, a user can go into the Preferences area and inspect their cookies. Recently, some browsers have made cookies a little harder for a basic user to inspect, but there are still ways to view them such as using a browser's Developer Tools. Cookie data also may be visible while in transit. Cookie data is sent in plain text in the header of every request to the web server. An attacker with the ability to observe network traffic will see them. This is easy to do on an open Wi-Fi network like those found in coffee shops, hotels, and airports. Cross-site scripting attacks can also be used to get cookie data. Here's an example in PHP. I split the URL up to make it easier to read. It uses JavaScript to get the cookie data and then it pings a URL that the hacker owns with the cookie data in the query. Once an attacker can view a cookie, they can steal it. Now stealing a cookie doesn't mean removing it as if it were a physical object. An attacker steals a cookie by placing the same values in a cookie on the attacker's browser. Or an attacker can forge a request and include the cookie data as if it were their own. Alternatively, an attacker could modify the cookie value to suit their purposes. So, how can we keep other people's hands out of our cookie jar? The best prevention is not to put anything of value in the cookies. Limit them to storing unimportant, non-sensitive data. For example, it would be appropriate to store a user's default language preference. That's not sensitive data. An attacker gains nothing by stealing it. But it would not be a good idea to store a token that grants access to a restricted webpage. If an attacker stole that data, it would be like a magic key to a user account. Sessions are usually stored in a database or a file on the server side. A reference identifier or session ID is stored in the user's browser as a cookie so the session file can be booked up on every request. With the session, sensitive data stays on the server so it can't be observed in transit or in storage. Of course, the session ID will be observable in transit and in the cookie data, so additional precautions still need to taken to protect it. As we discussed with cross-site scripting, when cookies are created, they should be flagged as HttpOnly, making them unavailable to JavaScript. An attacker would not be able to read the value using document.cookie anymore. I strongly recommend that you set up an SSL Certificate and use HTTPS for all webpages. This will encrypt all communication between your web server and a user's browser, and prevents anyone from observing cookie data while it is on transit. I have another course here on LinkedIn Learning called SSL Certificates for Web Developers which walks you through it. Once you're using SSL, then you should also use secure cookies. Secure cookies are only sent if the connection is over HTTPS. If a user accidentally types the URL with HTTP instead of using HTTPS, then the cookies would still not be sent. You set a flag when a cookie is created to indicate that it should be secure. Session cookies are usually configured in a global configuration. Cookies should also be given expiration dates. You can either provide an exact date using Expires, or a maximum number of seconds using Max-Age. The web browser will automatically delete the cookie after its expiration. This helps to clean up old cookies instead of letting them linger. You should also consider the domain, subdomain, and path that will use a cookie. By default, a cookie is available throughout a domain name, on all subdomains, and on all pages. If a cookie should only be used with one subdomain, or only within a certain directory, then it can be restricted. Use the Domain or Path attributes when setting the cookie. Now don't go crazy here, but think about whether it makes sense to apply the principle of least privilege to certain cookies. A sensitive data is to be stored in cookies and not on the recommended server side session then it should be encrypted. One advantage of encrypted cookies is that they're never in plain text while in transit or in storage. Cookies can also be digitally signed to prevent modification. Signing a cookie means running the cookie through an algorithm to get a checksum, which is then added at the end of the cookie data. When the cookie data is received by the web application, the first part, the value, will be run through the same algorithm, and then the checksums will be compared. If they match, then the value has not been modified. Be smart about what goes in cookies and protect them using smart cookie settings and encryption.